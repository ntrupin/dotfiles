" leader
nnoremap <SPACE> <NOP>
let mapleader=' '

" {{{ Settings

" General
set filetype syntax confirm
set noautochdir noshowmode
set scrolloff=7
set showtabline=2
set colorcolumn=80

" search
set hlsearch incsearch ignorecase smartcase

" split pane
set nosplitright splitbelow

" appearance
set mouse=a
set list listchars=tab:▷▷,trail:␣,nbsp:⍽

" folding
set foldmethod=marker foldlevel=0

" tabs as spaces
set tabstop=4 shiftwidth=4 softtabstop=0 expandtab autoindent

" spellcheck
set nospell spelllang=en_us spellsuggest=best,8
augroup SpellCheck
  autocmd!
  autocmd FileType tex,text,markdown setlocal spell
augroup END

" window
set number relativenumber numberwidth=3
set cursorline cursorcolumn

" }}}

" {{{ Colorscheme

colo lunaperche

" }}}

" {{{ VimPlug

let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin()
Plug 'junegunn/goyo.vim' " focus mode
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'  " fuzzy finder
Plug 'lervag/vimtex'     " tex support
call plug#end()

" }}}

" {{{ Netrw

" options
let g:netrw_winsize=25
let g:netrw_keepdir=0               " sync current dir and browsing dir
let g:netrw_banner=0
let g:netrw_localcopydircmd='cp -r' " recursive copy dirs

" keymaps
nnoremap <leader>t :Lexplore<CR>

" clear statusline
autocmd FileType netrw setlocal statusline=\ 

" }}}

" {{{ Statusline

set laststatus=2                                   " always show statusline

let g:currentmode={
  \ 'n'  : 'NORMAL', 'no' : 'OP-PENDING',
  \ 'v'  : 'VISUAL', 'V'  : 'V-LINE', '' : 'V-BLOCK',
  \ 's'  : 'SELECT', 'S'  : 'S-LINE', '' : 'S-BLOCK',
  \ 'i'  : 'INSERT',
  \ 'R'  : 'REPLACE', 'Rv' : 'V-REPLACE',
  \ 'c'  : 'COMMAND', 'cv' : 'VIM EX', 'ce' : 'EX',
  \ 'r'  : 'PROMPT', 'rm' : 'MORE', 'r?' : 'CONFIRM',
  \ '!'  : 'SHELL' }
set statusline=\|                                  " bar 
set statusline+=\ %{currentmode[mode()]}           " current mode
set statusline+=\ \|                               " space and bar
set statusline+=\ %f                               " path to file
set statusline+=\ %m                               " modified
set statusline+=%=                                 " switch to right side
set statusline+=%{(&fenc!=''?&fenc:&enc)}          " file encoding / encoding
set statusline+=\ \|                               " space and bar
set statusline+=\ %Y                               " filetype
set statusline+=\ \|                               " space and bar
set statusline+=\ %P                               " percent through file
set statusline+=\ \|                               " space and bar
set statusline+=\ %l                               " current line
set statusline+=:                                  " colon
set statusline+=%c                                 " current column
set statusline+=\ \|%{''}                          " end

" }}}

" {{{ Keybinds

" autopair
inoremap ( ()<LEFT>
inoremap [ []<LEFT>
inoremap {<CR> {<CR>}<ESC>ko<TAB>

" split panes
nnoremap <leader>\| :vsplit<CR><C-w>l
nnoremap <leader>- :split<CR><C-w>j
nnoremap <leader>q <C-w>q
nnoremap <leader>h <C-w>h
nnoremap <leader>j <C-w>j
nnoremap <leader>k <C-w>k
nnoremap <leader>l <C-w>l
nnoremap <leader><LEFT> <C-w>10<
nnoremap <leader><RIGHT> <C-w>10>
nnoremap <leader><UP> <C-w>5+
nnoremap <leader><DOWN> <C-w>5-
nnoremap <leader>H <C-w>H
nnoremap <leader>J <C-w>J
nnoremap <leader>L <C-w>L

" buffers
nnoremap <leader>[ :bprevious<CR>
nnoremap <leader>] :bnext<CR>

" autocomplete
inoremap <expr><TAB> pumvisible() ? '<C-n>' : '<TAB>'
inoremap <expr><S-TAB> pumvisible() ? '<C-p>' : '<C-n>'

" fzf - taken from ntrupin/noahvim telescope bindings
nnoremap <leader>ff :Files<CR>
nnoremap <leader>f/ :Lines<CR>
nnoremap <leader>b :Buffers<CR>
nnoremap <leader>fh :Helptags<CR>

" }}}

" {{{ Custom commands

command NoahHTerm botright term
command NoahVTerm vertical botright term

" }}}
